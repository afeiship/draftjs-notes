[{"/Users/aric.zheng/github/draftjs-notes/draft-app/src/index.js":"1","/Users/aric.zheng/github/draftjs-notes/draft-app/src/App.js":"2","/Users/aric.zheng/github/draftjs-notes/draft-app/src/reportWebVitals.js":"3","/Users/aric.zheng/github/draftjs-notes/draft-app/src/entities/mediaBlockRenderer.js":"4"},{"size":500,"mtime":1611035167201,"results":"5","hashOfConfig":"6"},{"size":4494,"mtime":1611112679538,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1611035167202,"results":"8","hashOfConfig":"6"},{"size":1003,"mtime":1611111382010,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1kg8r7z",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"12"},"/Users/aric.zheng/github/draftjs-notes/draft-app/src/index.js",[],["20","21"],"/Users/aric.zheng/github/draftjs-notes/draft-app/src/App.js",[],"/Users/aric.zheng/github/draftjs-notes/draft-app/src/reportWebVitals.js",[],"/Users/aric.zheng/github/draftjs-notes/draft-app/src/entities/mediaBlockRenderer.js",["22","23","24","25"],"import React from 'react';\nimport { EditorState, RichUtils, AtomicBlockUtils } from 'draft-js';\nimport katex from 'katex';\n\nclass Latex extends React.Component {\n  componentDidMount() {\n    const { value } = this.props;\n    katex.render(value, this.root, {\n      throwOnError: false\n    });\n  }\n\n  render() {\n    return <span ref={(root) => (this.root = root)}></span>;\n  }\n}\n\nexport const mediaBlockRenderer = (block) => {\n  if (block.getType() === 'atomic') {\n    return {\n      component: Media,\n      editable: false\n    };\n  }\n\n  return null;\n};\n\nconst Image = (props) => {\n  if (!!props.src) {\n    return <img src={props.src} />;\n  }\n  return null;\n};\n\nconst Media = (props) => {\n  const entity = props.contentState.getEntity(props.block.getEntityAt(0));\n  const { src, value } = entity.getData();\n  const type = entity.getType();\n\n  let media;\n\n  if (type === 'image') {\n    media = <Image src={src} />;\n  }\n\n  if (type === 'latex') {\n    media = <Latex value={value} />;\n  }\n\n  return media;\n};\n",{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","severity":1,"message":"31","line":2,"column":10,"nodeType":"32","messageId":"33","endLine":2,"endColumn":21},{"ruleId":"30","severity":1,"message":"34","line":2,"column":23,"nodeType":"32","messageId":"33","endLine":2,"endColumn":32},{"ruleId":"30","severity":1,"message":"35","line":2,"column":34,"nodeType":"32","messageId":"33","endLine":2,"endColumn":50},{"ruleId":"36","severity":1,"message":"37","line":31,"column":12,"nodeType":"38","endLine":31,"endColumn":35},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"no-unused-vars","'EditorState' is defined but never used.","Identifier","unusedVar","'RichUtils' is defined but never used.","'AtomicBlockUtils' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]