[{"/Users/aric.zheng/github/draftjs-notes/draft-app/src/index.js":"1","/Users/aric.zheng/github/draftjs-notes/draft-app/src/App.js":"2","/Users/aric.zheng/github/draftjs-notes/draft-app/src/reportWebVitals.js":"3","/Users/aric.zheng/github/draftjs-notes/draft-app/src/entities/mediaBlockRenderer.js":"4","/Users/aric.zheng/github/draftjs-notes/draft-app/src/entities/image-decorator.js":"5"},{"size":500,"mtime":1611035167201,"results":"6","hashOfConfig":"7"},{"size":6207,"mtime":1611123075731,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1611035167202,"results":"9","hashOfConfig":"7"},{"size":1047,"mtime":1611120890938,"results":"10","hashOfConfig":"7"},{"size":837,"mtime":1611123505927,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1kg8r7z",{"filePath":"15","messages":"16","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"14"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/aric.zheng/github/draftjs-notes/draft-app/src/index.js",[],["25","26"],"/Users/aric.zheng/github/draftjs-notes/draft-app/src/App.js",["27","28"],"import React from 'react';\nimport {\n  EditorState,\n  Editor,\n  RichUtils,\n  Modifier,\n  CompositeDecorator,\n  DefaultDraftBlockRenderMap,\n  AtomicBlockUtils\n} from 'draft-js';\n// import Editor from 'draft-js-plugins-editor';\nimport { mediaBlockRenderer } from './entities/mediaBlockRenderer';\nimport Immutable from 'immutable';\nimport { ENTITY_TYPE } from 'draft-js-utils';\nimport ImageDecorator from './entities/image-decorator';\nimport 'draft-js/dist/Draft.css';\nimport './App.css';\n// https://medium.com/@siobhanpmahoney/building-a-rich-text-editor-with-react-and-draft-js-part-2-4-persisting-data-to-server-cd68e81c820\n// https://stackoverflow.com/questions/62249348/i-am-trying-to-use-draft-js-where-i-need-to-add-inline-image-and-text\n// import '../App.css';\n\nclass SpanWrap extends React.Component {\n  render() {\n    return <span {...this.props} />;\n  }\n}\n\nconst blockRenderMap = Immutable.Map({\n  atomic: {\n    element: 'span'\n  }\n});\n\nconst decorator = new CompositeDecorator([ImageDecorator]);\n\nfunction myBlockStyleFn(contentBlock) {\n  const type = contentBlock.getType();\n  console.log('type:', type);\n  if (type === 'blockquote') {\n    return 'superFancyBlockquote';\n  }\n\n  if (type === 'unstyled') {\n    return 'block-unstyled';\n  }\n\n  if (type === 'atomic') {\n    return 'f-atomic';\n  }\n}\n\nconst extendedBlockRenderMap = DefaultDraftBlockRenderMap.merge(blockRenderMap);\n\nconsole.log(extendedBlockRenderMap, DefaultDraftBlockRenderMap);\n\nclass PageContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      editorState: EditorState.createEmpty(decorator)\n    };\n  }\n\n  onChange = (editorState) => {\n    this.setState({\n      editorState\n    });\n  };\n\n  handleKeyCommand = (command) => {\n    const newState = RichUtils.handleKeyCommand(this.state.editorState, command);\n    if (newState) {\n      this.onChange(newState);\n      return 'handled';\n    }\n    return 'not-handled';\n  };\n\n  onURLChange = (e) => this.setState({ urlValue: e.target.value });\n\n  focus = () => this.refs.editor.focus();\n\n  onAddLatex = (e) => {\n    e.preventDefault();\n    const editorState = this.state.editorState;\n    const urlValue = window.prompt('Paste latex value');\n    const contentState = editorState.getCurrentContent();\n    const contentStateWithEntity = contentState.createEntity('latex', 'IMMUTABLE', {\n      value: urlValue\n    });\n    const entityKey = contentStateWithEntity.getLastCreatedEntityKey();\n    const newEditorState = EditorState.set(\n      editorState,\n      { currentContent: contentStateWithEntity },\n      'create-entity'\n    );\n\n    // text\n    const target1 = Modifier.insertText(\n      contentStateWithEntity,\n      editorState.getSelection(),\n      ' ',\n      null,\n      entityKey\n    );\n\n    //  atomic block\n    const target2 = AtomicBlockUtils.insertAtomicBlock(newEditorState, entityKey, ' ');\n\n    this.setState(\n      {\n        editorState: target2\n      },\n      () => {\n        setTimeout(() => this.focus(), 0);\n      }\n    );\n  };\n\n  onAddImage = (e) => {\n    e.preventDefault();\n    const editorState = this.state.editorState;\n    const urlValue = window.prompt('Paste Image Link');\n    const contentState = editorState.getCurrentContent();\n    const contentStateWithEntity = contentState.createEntity('image', 'IMMUTABLE', {\n      src: urlValue\n    });\n    const entityKey = contentStateWithEntity.getLastCreatedEntityKey();\n    const newEditorState = EditorState.set(\n      editorState,\n      { currentContent: contentStateWithEntity },\n      'create-entity'\n    );\n    this.setState(\n      {\n        editorState: AtomicBlockUtils.insertAtomicBlock(newEditorState, entityKey, ' ')\n      },\n      () => {\n        setTimeout(() => this.focus(), 0);\n      }\n    );\n  };\n\n  onAddImage2 = () => {\n    // https://github.com/sstur/react-rte/blob/master/src/lib/EditorToolbar.js\n    const editorState = this.state.editorState;\n    let contentState = editorState.getCurrentContent();\n    let selection = editorState.getSelection();\n    const src = 'https://himg.bdimg.com/sys/portrait/item/be10475f686d6c73db00.jpg';\n    contentState = contentState.createEntity(ENTITY_TYPE.IMAGE, 'IMMUTABLE', { src });\n    let entityKey = contentState.getLastCreatedEntityKey();\n    let newContentState = Modifier.insertText(contentState, selection, ' ', null, entityKey);\n    const target = EditorState.push(editorState, newContentState);\n    console.log(target);\n    this.setState(\n      {\n        editorState: target\n      },\n      () => {\n        setTimeout(() => this.focus(), 0);\n      }\n    );\n  };\n\n  onUnderlineClick = () => {\n    this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, 'UNDERLINE'));\n  };\n\n  onBoldClick = () => {\n    this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, 'BOLD'));\n  };\n\n  onItalicClick = () => {\n    this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, 'ITALIC'));\n  };\n\n  render() {\n    return (\n      <div className=\"editorContainer\">\n        <div className=\"menuButtons\">\n          <button onClick={this.onUnderlineClick}>U</button>\n          <button onClick={this.onBoldClick}>\n            <b>B</b>\n          </button>\n          <button onClick={this.onItalicClick}>\n            <em>I</em>\n          </button>\n          <button onClick={this.onAddLatex}>latex</button>\n          <button className=\"inline styleButton\" onClick={this.onAddImage2}>\n            <i\n              className=\"material-icons\"\n              style={{\n                fontSize: '16px',\n                textAlign: 'center',\n                padding: '0px',\n                margin: '0px'\n              }}>\n              image\n            </i>\n          </button>\n        </div>\n        <div className=\"editors\">\n          <Editor\n            placeholder=\"type text...\"\n            blockRendererFn={mediaBlockRenderer}\n            blockRenderMap={extendedBlockRenderMap}\n            editorState={this.state.editorState}\n            blockStyleFn={myBlockStyleFn}\n            handleKeyCommand={this.handleKeyCommand}\n            onChange={this.onChange}\n            plugins={this.plugins}\n            ref=\"editor\"\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PageContainer;\n","/Users/aric.zheng/github/draftjs-notes/draft-app/src/reportWebVitals.js",[],"/Users/aric.zheng/github/draftjs-notes/draft-app/src/entities/mediaBlockRenderer.js",["29","30","31","32"],"import React from 'react';\nimport { EditorState, RichUtils, AtomicBlockUtils } from 'draft-js';\nimport katex from 'katex';\n\nclass Latex extends React.Component {\n  componentDidMount() {\n    const { value } = this.props;\n    katex.render(value, this.root, {\n      throwOnError: false\n    });\n  }\n\n  render() {\n    return <span className=\"std-latex\" ref={(root) => (this.root = root)}></span>;\n  }\n}\n\nexport const mediaBlockRenderer = (block) => {\n  if (block.getType() === 'atomic') {\n    return {\n      component: Media,\n      editable: false\n    };\n  }\n\n  return null;\n};\n\nconst Image = (props) => {\n  if (!!props.src) {\n    return <img className=\"std-image\" src={props.src} />;\n  }\n  return null;\n};\n\nconst Media = (props) => {\n  const entity = props.contentState.getEntity(props.block.getEntityAt(0));\n  const { src, value } = entity.getData();\n  const type = entity.getType();\n\n  let media;\n\n  if (type === 'image') {\n    media = <Image src={src} />;\n  }\n\n  if (type === 'latex') {\n    media = <Latex value={value} />;\n  }\n\n  return media;\n};\n","/Users/aric.zheng/github/draftjs-notes/draft-app/src/entities/image-decorator.js",["33","34"],{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":22,"column":7,"nodeType":"41","messageId":"42","endLine":22,"endColumn":15},{"ruleId":"39","severity":1,"message":"43","line":99,"column":11,"nodeType":"41","messageId":"42","endLine":99,"endColumn":18},{"ruleId":"39","severity":1,"message":"44","line":2,"column":10,"nodeType":"41","messageId":"42","endLine":2,"endColumn":21},{"ruleId":"39","severity":1,"message":"45","line":2,"column":23,"nodeType":"41","messageId":"42","endLine":2,"endColumn":32},{"ruleId":"39","severity":1,"message":"46","line":2,"column":34,"nodeType":"41","messageId":"42","endLine":2,"endColumn":50},{"ruleId":"47","severity":1,"message":"48","line":31,"column":12,"nodeType":"49","endLine":31,"endColumn":57},{"ruleId":"47","severity":1,"message":"48","line":12,"column":9,"nodeType":"49","endLine":12,"endColumn":26},{"ruleId":"50","severity":1,"message":"51","line":30,"column":1,"nodeType":"52","endLine":33,"endColumn":3},"no-native-reassign",["53"],"no-negated-in-lhs",["54"],"no-unused-vars","'SpanWrap' is defined but never used.","Identifier","unusedVar","'target1' is assigned a value but never used.","'EditorState' is defined but never used.","'RichUtils' is defined but never used.","'AtomicBlockUtils' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]